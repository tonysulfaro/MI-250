Module 4 Homework
*****************

Unlike prior assignments, your Module 4 homework will be a mid-sized project.


1. Build a multi-user RESTful web service that will function as web service for storing favorite albums and creating playlists, using Python's HttpRequestHandler. You will integrate your application with Spotify (and, if you want, Discogs, for more comprehensive album info)

Each album will be stored with the following properties:

    -   An ID
    -   The album title
    -   The artist name
    -   The label
    -   The release date
    -   A remote identifier on another service

Each user has:

    -   An ID
    -   A user name
    -   A set of albums
    -   A set of playlists

Each playlist has:
    -   An ID
    -   A title
    -   A list of songs to play (album id, track id)

Note that track information is not stored locally


2. The service will offer the following end-points:

    +   GET /albums   #Gets all albums that the your system has local knowledge of
                      #HTML page renders as a table in a browser
                      #Should support the use of query parameters to search for any fields in the album

    +   GET /albums/{id}            #Gets the album, with complete track listing

    -   GET /albums/query/{id}      #Gets a list of albums returned by a query (see the POST below)
                                    #This url will timeout after 1 hour

    +   GET /users/{id}/            #Gets all user info, including id's of albums, playlists
    +   GET /users/{id}/albums      #Just lists the user's albums
    +   GET /users/{id}/playlists   #Just lists the user's playlists


    +   GET /users                  #Gets all users

    +   GET /playlists              #Gets all playlists
    +   GET /playlists/{id}         #Gets specific playlist, with list of track names / length
    -   GET /playlists/query/{id}   #Gets a list of playlists returned by a query (see the POST below)
                                    #This url will timeout after 1 hour

    +   DELETE /users/{id}      #Only successful if a user deletes themselves
    +   DELETE /playlists/{id}  #Only successful if no users "own" the playlist
    +   DELETE /albums/{id}     #Only successful if no users "own" the id

    -   PUT|DELETE /playlists/{id}          #Adds/Deletes a favorite playlist to the user's list of fav
                                            #Authenticated
    -   PUT /playlists/query/{id}           #Saves the query result to the user's playlists
                                            #Requires a query parameter to name the playlist

    -   PUT|DELETE /albums/{id}         #Adds/Deletes a favorite album to the user's list of favs
                                        #Authenticated
    -   PUT /

    +   POST /albums    #Post a body as a form with fields corresponding to the fields in an album
                        #You will search your backend service (spotify / discogs) and redirect the user
                        #To a unique query url with all of the matching albums

    +   POST /playlists     #Authenticated post with an empty body creates a playlist based on the user's
                            #favorite albums
                            #Post with a body containing an album id creates a playlist based on that album
                            #Must be an id that the system knows about, or return an error
                            #Unauthenticated posts requre a body
                            #In all cases, redirects the user to a unique query url

    +   POST /users/{id}/token      #Returns a token (nonce) that the user can use to access the service
                                    #Requires username & password parameters
                                    #Token should expire after 10 minutes of inactivity

    +   POST /users         #Create a new user.  Requires a username and password as form parameters
                            #Fails is username is taken & password does not match
                            #Success redirects to the pre-existing or newly created /users/{id}

3.  All urls that return something should handle text/json.  The following should also render html with the appropriate content header

    -   GET /albums                 # Should contain basic info, and link to album for track listing
    -   GET /playlists              # Should contain titles, with links to each playlist for track listing
    -   GET /albums/{id}            # Album with track listing
    -   GET /playlists/{id}         # Playlist with track listing
    -   GET /users/{id}/playlists   # As above
    -   GET /users/{id}/albums      # As above


4.  Please create a command line driven client to test all of the relevant functionality.  It should be possible to test all endpoints.  Use the requests library.









2. The service should enable multiple users. All data is public, but only the owner can update their own stuff.
